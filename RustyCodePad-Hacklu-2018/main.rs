extern crate seccomp;
extern crate libc;

use seccomp::*;

fn main() {
    // In an array you can have characters like ' and " or maybe \
    // So to write any of these you need an escape character.
    // What if the string is long and you don't have to change anything.
    // You just start your string by r#" and end it with "#
    // If for any reason you need "# in the string you can start with r##"
    // And finish it with "##
    let template: &str = r##"MAHER"##;
    println!("Hello, world! {}", template);

    let mut ctx = seccomp::Context::default(seccomp::Action::Allow).unwrap();
    let rule = Rule::new(
            libc::SYS_setuid as usize,
            Compare::arg(0)
                    .with(1000)
                    .using(Op::Eq)
                    .build().unwrap(),
            Action::Errno(libc::EPERM)
        );
    let r = ctx.add_rule(rule);
    match r {
        Ok(x) => println!("Rule added successfuly!"),
        Err(x)    => println!("Something went wrong!"),
    }
    ctx.load().unwrap();    
    let ret = unsafe {
        libc::setuid(1000)
    };
    println!("ret is {}", ret);
    
    let mut v = vec![1, 2, 3, 4];
    let vec_copy = &mut v[..];

    let (a, b) = vec_copy.split_at_mut(2);
    println!("vec : {}", vec_copy[3]);
}
